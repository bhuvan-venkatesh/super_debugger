/**
 * 	@file: valgrind
 * 	@author: Guiping Xie 
 *
 * 	@description: UIUC - CS241 (System Programming) Honors Project 
 *	@date: Spring 2016
 *
 */

using namespace std;


struct errors {
  string errorMessage;
  vector< tuple<string, string, int> > description;
};

tuple<string, string, int> desLines;

// important
vector<errors> dividedErrors[9];
vector<errors> totalErrors;
vector<string> memory;


string flags[] = {"-f", "--force"};

string listOfErrors[] = {"Segfault", "Invalid Read", "Invalid Write", "Invalid Free", "Mismatched Free ~ Always use malloc with free and new with delete", "Source and Destination Overwrite Each Other", "Conditional Jump", "A System Call Parameter is Uninitialised", "Your Function is Uninitialized, Value Might Be Too Big or Negative"}; 

/*
0 - SIGSEGV
1 - Invalid read
2 - Invalid write
3 - Invalid free
4 - Mismatched free
5 - Source and destination		--- 	can handle right away
6 - Conditional jump
7 - Syscall										---		can handle right away	
8 - Argument fishy 						---		can handle right away
*/


void printMem() {
  for (int i = 0; i < memory.size(); ++i)
    cerr << memory[i] << "\n";
  cerr << "\n";
}


void printDes(tuple<string, string, int> t) { 
  cerr << "    Function: " << get<0>(t) << "    File: " << get<1>(t) << "    Line#: " << get<2>(t) << "\n"; 
}


void printErrors(errors t) {
  cerr << t.errorMessage << "\n";
  for (auto it = (t.description).begin(); it != (t.description).end(); ++it)
    printDes(*it);
  cerr << "\n";
}


void printCategory() {
	cerr << "\n";
  for (int i = 0; i < 9; ++i) {
    if (dividedErrors[i].size()) {
      cerr << "--------  " << listOfErrors[i] << "  -------- \n";
      for (int j = 0; j < dividedErrors[i].size(); ++j)
        printErrors(dividedErrors[i][j]);

      cerr << "\n";
    }
  }
}


char **strsplit(char *str, const char *delim, size_t *numtokens) {
  size_t tokens_alloc = 1;
  size_t tokens_used = 0;
  char **tokens = (char**)calloc(tokens_alloc, sizeof(char*));
  char *token, *strtok_ctx;

  for (token = strtok_r(str, delim, &strtok_ctx); token != NULL; token = strtok_r(NULL, delim, &strtok_ctx)) {
    // check if we need to allocate more space for tokens
    if (tokens_used == tokens_alloc) {
      tokens_alloc *= 2;
      tokens = (char**)realloc(tokens, tokens_alloc * sizeof(char *));
    }

    tokens[tokens_used++] = strdup(token);
  }

  // cleanup
  if (tokens_used == 0) {
    free(tokens);
    tokens = NULL;
  } 
  else {
    tokens = (char**)realloc(tokens, tokens_used * sizeof(char *));
  }

  *numtokens = tokens_used;
  tokens = (char**)realloc(tokens, sizeof(char *) * (tokens_used + 1));
  tokens[tokens_used] = NULL;
  return tokens;
}


vector< string > parseNewLine( char* str ) {
	vector< string > ret;

	char* parsed = strtok( str, "\n" );
	while ( parsed != NULL ) {
		ret.push_back( parsed );
		parsed = strtok( NULL, "\n" );
	}
	
	return ret;
}


/*
// got online --- http://stackoverflow.com/questions/236129/split-a-string-in-c 
vector<string>& split(string &str, char delim) {
	vector<string> elems;
  stringstream ss(str);
  string item;
  while (getline(ss, item, delim)) 
    elems.push_back(item); 
    
  return elems; 
}
*/


void parse(char* str) {
  vector<string> errorLines;
  string empty = "";
  string funct;
  string file;
  int lineNum;
  errorLines.push_back(empty);
  int end = 0;
  int place;

  vector<string> parseMe = parseNewLine( str );

	int len = parseMe.size();
  string line;
  int idx = 0;
  
  do {
  	line = parseMe[idx];
  	++idx;
  } while ( line.find("== Memcheck, a memory error detector") == -1 );
  
  string begin = line.substr( 0, line.find("Memcheck") );
  
  for (int i = 5; i < len; ++i) {
    line = parseMe[i];
    
    if ( !line.find(begin) ) {
		  line.erase(0, line.find(" ") + 1);

		  if (!line.find("HEAP SUMMARY")) 
		    place = end;

		  errorLines.push_back(line);
		  ++end;
    }
  }

  int i = 0;
  while (i != place) {
    if (errorLines[i].empty()) {
      errors temp;
      while (errorLines[i].empty())
        ++i;

      if (i >= place)
        break;

      temp.errorMessage = errorLines[i];
      ++i;

      while (!errorLines[i].empty()) {
        int k = errorLines[i].find(":");
        if (k != -1) {
          errorLines[i].erase(0, k + 2);
          if (errorLines[i][0] != '_') {
            int w = errorLines[i].find(" ");
            funct = errorLines[i].substr(0, w);			
            errorLines[i].erase(0, w + 2);

            int c = errorLines[i].find(":");
            file = errorLines[i].substr(0, c);
            errorLines[i].erase(0, c + 1);
            if (errorLines[i][0] >= '0' && errorLines[i][0] <= '9') {
              int lineNum = stoi(errorLines[i].substr(0, errorLines[i].length() - 1));
              desLines = make_tuple(funct, file, lineNum);
              (temp.description).push_back(desLines);
            }
            else {
              desLines = make_tuple(funct, "C Lib Call", -1);
              (temp.description).push_back(desLines);
            }
          }
        }

        ++i;
      }

      totalErrors.push_back(temp);
    }
  }

  for (; i < errorLines.size(); ++i) {
    if (errorLines[i].find("LEAK SUMMARY") != -1) {
      while (i < errorLines.size()) {
        if (errorLines[i].find("Rerun with") != -1) 
          i = errorLines.size();
        else memory.push_back(errorLines[i]);

        ++i;
      }
    }
    else {
      memory.push_back(errorLines[i]);

      if (errorLines[i].find("All heap blocks") != -1) 
        i = errorLines.size();
    }
  }	

  // print stuff
/*	
  for (int i = 0; i < totalErrors.size(); ++i) 
  	printErrors(totalErrors[i]);	

  printMem();
*/	 
}


void examine() {
  for (int i = 0; i < totalErrors.size(); ++i) {
    if (totalErrors[i].errorMessage.find("(SIGSEGV)") != -1)
      dividedErrors[0].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Invalid read"))
      dividedErrors[1].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Invalid write"))
      dividedErrors[2].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Invalid free"))
      dividedErrors[3].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Mismatched free"))
      dividedErrors[4].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Source and destination"))
      dividedErrors[5].push_back(totalErrors[i]);
    else if (totalErrors[i].errorMessage.find("has a fishy") != -1)
      dividedErrors[8].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Conditional jump"))
      dividedErrors[6].push_back(totalErrors[i]);
    else if (!totalErrors[i].errorMessage.find("Syscall param"))
      dividedErrors[7].push_back(totalErrors[i]);
  }

  // add print stuff here
  //printCategory();
}


void handleNows() {
  cerr << "\n----------------------------------------------------------------------------------"
  "\n----------------------------------------------------------------------------------\n\n";

  cerr << "\t\e[1m***\tFix these errors before continuing   ***\n\t***\tIf you want to force continue"
  " your program:   ***\n\t***\trerun with -f or --force flag eg ./debug -f ./yourProgram   ***\e[0m\n\n";

  cerr << "----------------------------------------------------------------------------------"
  "\n----------------------------------------------------------------------------------\n\n";

  if (dividedErrors[5].size()) {
    for (int i = 0; i < dividedErrors[5].size(); ++i) {
      string err = dividedErrors[5][i].errorMessage;
      string s = err.substr(34, err.find("(") - 34);
      cerr << "The source and destination of the function: \e[1m\e[4m" << s << "\e[0m\e[0m overlap\n"; 
      vector< tuple<string, string, int> > errDescript = dividedErrors[5][i].description;

      cerr << "\tYour error is in the function: \e[1m\e[4m" << s << "\e[0m\e[0m\n";
      for (int j = 0; j < errDescript.size(); ++j) {
        if (get<2>(errDescript[j]) != -1) {
          cerr << "\tThis is on line: \e[1m\e[4m" << get<2>(errDescript[j]) << "\e[0m\e[0m, of the file: \e[1m\e[4m" << get<1>(errDescript[j]) << "\e[0m\e[0m, in: \e[1m\e[4m" << get<0>(errDescript[j]) << "\e[0m\e[0m\n\n\n";
          break;
        }
      }
    }
  }

  if (dividedErrors[7].size()) {
    for (int i = 0; i < dividedErrors[7].size(); ++i) {
      string err = dividedErrors[7][i].errorMessage;
      string s = err.substr(14, err.find("points to uni") - 15);
      cerr << "Parameter(s) to the system call of the function: \e[1m\e[4m" << s << "\e[0m\e[0m are not initialized\n"; 
      vector< tuple<string, string, int> > errDescript = dividedErrors[7][i].description;

      int count = 0;				
      cerr << "\tYour error is in the function: \e[1m\e[4m" << s << "\e[0m\e[0m\n";	
      for (int j = 0; j < errDescript.size(); ++j) {
        if (count == 1 && get<2>(errDescript[j]) != -1) {
          cerr << "\n\tYou declared your parameter on line: \e[1m\e[4m" << get<2>(errDescript[j]) << "\e[0m\e[0m, of the file: \e[1m\e[4m" << get<1>(errDescript[j]) << "\e[0m\e[0m, in: \e[1m\e[4m" << get<0>(errDescript[j]) << "\e[0m\e[0m"; 
          break;
        }

        if (get<2>(errDescript[j]) != -1) {
          cerr << "\tThis is on line: \e[1m\e[4m" << get<2>(errDescript[j]) << "\e[0m\e[0m, of the file: \e[1m\e[4m" << get<1>(errDescript[j]) << "\e[0m\e[0m, in: \e[1m\e[4m" << get<0>(errDescript[j]) << "\e[0m\e[0m";
          ++count;
        }
      }

      cerr << "\n\n\n";
    }
  }

  if (dividedErrors[8].size()) {
    for (int i = 0; i < dividedErrors[8].size(); ++i) {
      string err = dividedErrors[8][i].errorMessage;
      string s = err.substr(28, err.find("has a fishy") - 29);
      string val = err.substr(err.find(":") + 2);
      cerr << "The value you passed into the function: \e[1m\e[4m" << s << "\e[0m\e[0m is too big or negative\nThe value \e[1m\e[4m" << s << "\e[0m\e[0m recieved is " << val << "\n"; 
      vector< tuple<string, string, int> > errDescript = dividedErrors[8][i].description;

      cerr << "\tYour error is in the function: \e[1m\e[4m" << s << "\e[0m\e[0m\n";
      for (int j = 0; j < errDescript.size(); ++j) {
        if (get<2>(errDescript[j]) != -1) {
          cerr << "\tThis is on line: \e[1m\e[4m" << get<2>(errDescript[j]) << "\e[0m\e[0m, of the file: \e[1m\e[4m" << get<1>(errDescript[j]) << "\e[0m\e[0m, in: \e[1m\e[4m" << get<0>(errDescript[j]) << "\e[0m\e[0m\n\n";
          break;
        }
      }
    }
  }
}


int execValgrind(int argc, char* argv[]) {
  int readMe[2];
  //int hide_output[2];

  if (pipe(readMe) == -1) {
    cerr << "\n\t\e[1mCreational of pipe for valgrind failed\e[0m\n\n";
    return 1;	
  }
/*  
  if (pipe(hide_output) == -1) {
    cerr << "\n\t\e[1mCreational of pipe for hiding output failed\e[0m\n\n";
    return 1;	
  }
*/
  pid_t parent = fork();

  if (parent == -1) {
    cerr << "\n\t\e[1mForking failed for valgrind process\e[0m\n\n";
    return 1;
  }

  if (parent) {
    // no need to wait anymore -- piping output ???
    if (close(readMe[1])) {								// parent does not write
			cerr << "\n\t\e[1mCould not close file descriptor for valgrind pipe\e[0m\n\n";
			return 1;
		}
/*		
		if (close(hide_output[1])) {								// parent does not write
			cerr << "\n\t\e[1mCould not close pipe for discarding info\e[0m\n\n";
			return 1;
		}
*/
    int status;
    int k = waitpid(parent, &status, 0);				// might need to check exit status

    if (k == -1) {
      cerr << "\n\t\e[1mChild process for valgrind failed\e[0m\n\n";
      return 1;
    }
/*    
    char discard_me[65536];
    while ( read(hide_output[0], discard_me, sizeof(discard_me)) );
*/    
    if (WIFEXITED(status) && WEXITSTATUS(status) == 1) 
    	return 1;
 
    char str[65536];

    int bytesread = read(readMe[0], str, sizeof(str));	

    if (bytesread == -1) {
    	cerr << "\n\t\e[1mCould not read from valgrind pipe\e[0m\n\n";
      return 1;
    }

    if (close(readMe[0])) {
    	cerr << "\n\t\e[1mCould not close file descriptor for valgrind pipe\e[0m\n\n";
			return 1;
    }	
/*    
    if (close(hide_output[0])) {					// no need for this stuff
    	cerr << "\n\t\e[1mCould not close pipe for discarding output\e[0m\n\n";
			return 1;
    }	
*/
		// check to see if valgrind returned bad input
		string temp;
		for (int i = 0; i < 10; ++i) 
			temp += str[i];
			
		if (!temp.find("valgrind: ")) {
			string output;
			for (int i = 10; i < strlen(str); ++i) {
				if (str[i] != '\n')
					output += str[i];
				else {
					output += str[i];
					break;
				}
			}
			
			if (output.find("command") != -1)
				cerr << "\n\t\e[1m" << output << "    make sure to include ./ if running an executable\e[0m\n\n";
			else cerr << "\n\t\e[1m" << output << "\e[0m\n";
			return 1;
		}

    // now parse the text file
    parse(str);

    // now do stuff  ---  vector should be filled by now
    // break up errors (if any) to different categories
    examine();

    int flag = 1;
    if ((!strcmp(argv[1], "-f")) || (!strcmp(argv[1], "--force")))
      flag = 0;

    // check if any handle-nows are happening --- these should also be top priority 
    // these errors might lead to further errors later on
    if (dividedErrors[5].size() + dividedErrors[7].size() + dividedErrors[8].size())
		  if (flag) {
		    handleNows();
		    return 2;
		  }		
  }
  else {
    if (close(readMe[0]))	{						// child does not read
			cerr << "\n\t\e[1mCould not close file descriptor for valgrind pipe\e[0m\n\n";
			exit(1);
		}
		
		if (fclose(stdout))	{						// close stdout
			cerr << "\n\t\e[1mCould not close stdout\e[0m\n\n";
			exit(1);
		}
/*		
		if (close(hide_output[0]))	{						// child does not read
			cerr << "\n\t\e[1mCould not close file descriptor for discard pipe\e[0m\n\n";
			exit(1);
		}
*/
    int m = 1;
    if ((!strcmp(argv[1], "-f")) || (!strcmp(argv[1], "--force"))) {
      ++m;
    }
    else if (argv[1][0] == '-') {	
    	cerr << "\n\t\e[1mInvalid flag (flags are -f or --force)\e[0m\n\n";					
    	exit(1);
  	}
  	
  	if ( m >= argc ) {
			cerr << "\n\t\e[1mNo executable detected\e[0m\n\n";
			exit(1);
		}
		
		while ( m < argc ) {
			if ( argv[m][0] != '.' )
				++m;
			else break;
		}
		
		if ( m >= argc ) {
			cerr << "\n\t\e[1mNo executable detected\e[0m\n\n";
			exit(1);
		}
/*		
		if (dup2(hide_output[1], 1) == -1) {						// redirect stderr	
			cerr << "\n\t\e[1mCould not redirect stdout for deletion\e[0m\n\n";
			exit(1);
		}
*/  	
  	if (dup2(readMe[1], 2) == -1) {						// redirect stdout	
			cerr << "\n\t\e[1mCould not redirect stderr to our valgrind pipe\e[0m\n\n";
			exit(1);
		}

    const char* valgrind_args[argc + 1];				// need to change this
    valgrind_args[0] = "valgrind";

    int j = 1;										// mad skillz handlez
    int p = m - j;
    for (int i = m; i < argc + p; ++i, ++j)
      valgrind_args[j] = argv[i];
    valgrind_args[argc] = NULL;

    int k = execvp(valgrind_args[0], (char* const*)valgrind_args);

		close(readMe[1]);
		//close( hide_output[1] );
		
    if (k == -1) {
    	cout << "\n\t\e[1mExecution failed for valgrind --- Make sure you have the correct executable\e[0m\n\n";
      exit(1);
    } 
  }
  
  return 0;
}
