#include <bits/stdc++.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/syscall.h>

#include <sys/stat.h>
#include <fcntl.h>

#include <sys/ptrace.h>
#include <sys/user.h>
#include <sys/reg.h>

using namespace std;

// struct for registers
struct user_regs_struct regs;

// struct to access stuff
struct user* user_space;

// Can have option to compile their file manually so they do not need to know compiler flags 

// helpers to get stuff
void* get_instr_ptr( pid_t pid ) {
	return ( void* )ptrace( PTRACE_PEEKUSER, pid, 8 * RIP, NULL );
}

void set_instr_ptr( pid_t pid, void* addr ) {
	ptrace( PTRACE_POKEUSER, pid, 8 * RIP, addr );
}

void* get_stack_ptr( pid_t pid ) {
	return ( void* )ptrace( PTRACE_PEEKUSER, pid, 8 * RSP, NULL );
}

void* get_ret_addr( pid_t pid, void* stack_pointer ) {
	return ( void* )ptrace( PTRACE_PEEKTEXT, pid, stack_pointer, NULL );
}

long get_data( pid_t pid, void* addr ) {
	return ptrace( PTRACE_PEEKDATA, pid, addr, NULL );
}

void set_data( pid_t pid, void* addr, void* data ) {
	ptrace( PTRACE_POKEDATA, pid, addr, data );
}

void step( pid_t pid ) {
	ptrace( PTRACE_SINGLESTEP, pid, NULL, NULL );
}

// create breakpoint
pair< long, void* > set_brkpt( pid_t pid, void* addr ) {							
<<<<<<< .mine
	// save intruction pointer
	//void* temp = get_instr_ptr( pid );
	void* temp = addr;
	//cout << temp << "\n";
	
=======
>>>>>>> .r59025
	// inject INT 3 = 0xCC --- this is an interrupt, sends signal to debugger
	long new_data = get_data( pid, addr );
	long former_data = new_data;
<<<<<<< .mine
	new_data = (new_data & ~0xFF) | 0xCC;
	set_data( pid, temp, ( void* )new_data );
=======
	new_data = (new_data & ~0xFF) | 0xCC;
	set_data( pid, addr, ( void* )new_data );
>>>>>>> .r59025
	
	// need to store the former instruction pointer and data
	pair< long, void* > p;
	p = make_pair( former_data, addr );
	return p;
}

// set back instruction pointer
void handle_brkpt( pid_t pid, void* instr_ptr, void* data ) {
	set_data( pid, instr_ptr, data );
	set_instr_ptr( pid, instr_ptr );
}


int main( int argc, char* argv[] ) {
	pid_t parent = fork();
	
	if ( parent == -1 ) {
		cerr << "Forking for main debugger failed\n";			
		exit( 420 );
	}
	
	if ( parent ) {
		int	status;
		int insyscall = 0;
		long orig_rax, rax, ins;
		long param[3];
		int brkpt = 0;
		
		// data at address, address
		pair< long, void* > brkpt_info;
<<<<<<< .mine
=======
		
		// vector to store all info about breakpoints
		vector< pair< long, void* > > all_brkpts;
		
		// for our vector
		int brkpt_pos = 0;
		
		// need array of breakpoint addresses --- might not be in order
		void* addr = ( void* )0x000000000040070d;				// fix to be main
>>>>>>> .r59025
		void* sec_addr = ( void* )0x0000000000400775;			// before malloc
		
<<<<<<< .mine
		
		void* addr = ( void* )0x00000000004006c4;				// fix to be main
		
		waitpid( parent, &status, 0 );
		orig_rax = ptrace( PTRACE_PEEKUSER, parent, 8 * ORIG_RAX, NULL );
		
=======
		waitpid( parent, &status, 0 );
		orig_rax = ptrace( PTRACE_PEEKUSER, parent, 8 * ORIG_RAX, NULL );
		
		// will send SIGTRAP at first execvp
>>>>>>> .r59025
		if ( WIFSTOPPED( status ) ) {
			if ( WSTOPSIG( status ) == SIGTRAP ) {				// before execve
				cout << "Child stopped on SIGTRAP - continuing...\n";
				cout << "The child made a system call " << orig_rax << " (execve)\n";
				
				// first breakpoint
				brkpt_info = set_brkpt( parent, addr );
<<<<<<< .mine
				brkpt = 1;
=======
				all_brkpts.push_back( brkpt_info );
				++brkpt;
				
				// second breakpoint
				brkpt_info = set_brkpt( parent, sec_addr );
				all_brkpts.push_back( brkpt_info );
				++brkpt;
				
>>>>>>> .r59025
				ptrace( PTRACE_CONT, parent, NULL, NULL );
			}
		}
		
<<<<<<< .mine
		//cout << get_instr_ptr( parent ) << "\n";
		
		waitpid( parent, &status, 0 );
		//cout << ptrace( PTRACE_PEEKUSER, parent, 8 * ORIG_RAX, NULL ) << "\n";
		
		if ( WIFSTOPPED( status ) ) {
			cout << get_instr_ptr( parent ) << "\n";
			set_data( parent, brkpt_info.second, ( void* )brkpt_info.first );
			handle_brkpt( parent, brkpt_info.second );	
			brkpt = 0;
			ptrace( PTRACE_CONT, parent, NULL, NULL );
		}
		
		do {
			waitpid( parent, &status, 0 );
			orig_rax = ptrace( PTRACE_PEEKUSER, parent, 8 * ORIG_RAX, NULL );

			//cout << get_instr_ptr( parent ) << "\n";

			//cout << orig_rax << "\n";

			if ( WIFSTOPPED( status ) ) {	
				usleep(10000);	
		  	//ptrace( PTRACE_CONT, parent, NULL, NULL );
		  }  
		}
		while ( !WIFEXITED( status ) );
		
		/*
=======
>>>>>>> .r59025
		do {
			waitpid( parent, &status, 0 );

			if ( WIFSTOPPED( status ) ) {
				//usleep( 10000 );
				cout << "Child stopped on address: " << get_instr_ptr( parent ) << "\n";
				
				if ( brkpt ) {
					cout << "In breakpoint: " << get_instr_ptr( parent ) << "\n";
					
					// get the breakpoint info from vector
					brkpt_info = all_brkpts[brkpt_pos++];
					
					// restore data to get rid of INT 3 and restore instr pointer
					handle_brkpt( parent, brkpt_info.second, ( void* )brkpt_info.first );	
					
					cout << "In breakpoint after reset data: " << get_instr_ptr( parent ) << "\n";
					
					--brkpt;
				}
				
				ptrace( PTRACE_CONT, parent, NULL, NULL );
		  }  
		}
		while ( !WIFEXITED( status ) );
		
		cout << "Child exited - debugger terminating...\n";
	}
	else {
		if ( ptrace( PTRACE_TRACEME, 0, NULL, NULL ) ) {
			cerr << "Cannot trace child process for main debugger\n";
			exit( 1337 );
		}
		
		int k = execvp( argv[1], &argv[1] );
		
		if ( k == -1 )
			cerr << "Execution failed for main debugger\n";
      exit( 1337 );
	}	
	
	return 0;
}
